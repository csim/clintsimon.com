<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Clint Simon</title>
    <link>http://clintsimon.com/tags/programming/</link>
    <description>Recent content in Programming on Clint Simon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright</copyright>
    <lastBuildDate>Fri, 17 Oct 2014 08:00:00 -0800</lastBuildDate>
    <atom:link href="http://clintsimon.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dropzone knockout binding</title>
      <link>http://clintsimon.com/post/2014/2014-10-17-dropzone-knockout-binding/</link>
      <pubDate>Fri, 17 Oct 2014 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2014/2014-10-17-dropzone-knockout-binding/</guid>
      <description>&lt;p&gt;A very simple knockout binding for &lt;a href=&#34;http://www.dropzonejs.com/&#34;&gt;dropzone.js&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/csim/4513ae3316104e6f474d.js?file=dropzone.knockout.js&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;https://gist.github.com/csim/4513ae3316104e6f474d.js?file=usage.html&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Data Migration is Hard</title>
      <link>http://clintsimon.com/post/2013/2013-08-06-Data-Migration-is-Hard/</link>
      <pubDate>Wed, 06 Aug 2014 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2013/2013-08-06-Data-Migration-is-Hard/</guid>
      <description>&lt;p&gt;Data migration can sink your project. It lurks around the edges of your estimation model, hiding deep dark secrets that will only be uncovered at the very end of the project. Nothing could be worse. Discovering that you need to increase the migration schedule 5 fold at the 11th hour can not only derail your project but if it happens too often it might derail your career.&lt;/p&gt;

&lt;p&gt;I have learned a few lesson on this topic:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Re-estimate your migration scope of work when there are significant changes in the new application.&lt;/strong&gt; At the beginning of the project, migration seems easy. A new system with like functionality should have a similar data model with a one-to-one mapping against the old data model.&lt;/p&gt;

&lt;p&gt;Often times the new system will morph into something completely different, creating complex transforms for the data migration process. Not only is this extra work for the data migration but you have to &lt;em&gt;define&lt;/em&gt; this extra work.&lt;/p&gt;

&lt;p&gt;Ideally when changes creep into the new system build, the data migration estimates are updated and timelines are adjusted. Having a designated data migration subject matter expert helps to spot trouble on the horizon and alert the team to data migration impact.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run your migration on the real data.&lt;/strong&gt; There is no substitute for real migration data. Often times, sample data is used for too long which engenders a false sense of confidence. When you finally use the real data, there are a boat load of issues that you could not have predicted.&lt;/p&gt;

&lt;p&gt;Use the real customer data as soon as possible in the process. Look at the outcomes in the new application, run scenario testing early and often. You simply have no idea what issues you will bump into.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think about performance.&lt;/strong&gt; No matter how elegant your code or how perfect you attribute mappings are, there will come a time when performance is paramount. If the migration takes 10 days to complete, most likely you have failed.&lt;/p&gt;

&lt;p&gt;Have a focus on performance from the beginning of the development effort. Identify the total number of source records to be transformed. Then get some baseline throughput numbers from you migration process. This will tell you how long the migration execution will take. You can also use a known duration to calculate how many records per second you need to achieve.&lt;/p&gt;

&lt;p&gt;Once you know the desired parameters, you can start to optimize your code. Optimizing performance is an &lt;a href=&#34;http://www.amazon.com/NET-Performance-Testing-Optimization-Complete/dp/1906434409&#34;&gt;art form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Multithread is a good way to improve performance but it comes with major pitfalls. The saying goes: You implemented multithreading to solve your problem, now you have two problems. If you understand thread safety and the basics of multithreaded software design, then multithreading is a good option, otherwise stay away from it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think about the execution plan &amp;amp; timings.&lt;/strong&gt; What time window is available to perform the migration? How much down time can you afford? Put together a timeline that clearly delineates the time allotted for each phase of the migration.&lt;/p&gt;

&lt;p&gt;Often times one way around performance and timing issues is to implement a &amp;ldquo;delta&amp;rdquo; load where only the changed data is migrated. First you run the full load, then the delta process moves only the data that has changed since the last migration pass. This breaks the migration process into smaller pieces and allows for those pieces to be spread across a longer period of time. When it&amp;rsquo;s time to go live, you only need to run the delta process once more to bring the data into synchronization, then you can launch the new system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understand the differences between legacy and new systems with regard to business use cases.&lt;/strong&gt; Don&amp;rsquo;t just think about data model differences, think about business process differences. The business context around data attributes is important when the situation dictates a complex transformation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Document all data gaps for the customer.&lt;/strong&gt; Inevitably you will run into data that simple cannot be directly mapped, transformed or converted to the new system. It is of the utmost importance to document these gaps, triage these issues with the client and work toward some form of resolution.&lt;/p&gt;

&lt;p&gt;There are general three things that the client may decide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ignore the data attribute. It is not important in the new system. Keep a backup of the old database just in case.&lt;/li&gt;
&lt;li&gt;Map the attribute to a different attribute in the new system. Things have been simplified or consolidated and the new system recognizes this attribute in a different way.&lt;/li&gt;
&lt;li&gt;Force the new system to consume the old attribute. Make a change request to add the old attribute to the new system. This usually stems from a mistake where important data attributes have been lost in the new system.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Plan for surprises.&lt;/strong&gt; Your source and destination are fixed, therefore scope is fixed. The causes more timeline risk, therefore you need to counter with rigor in estimation, planning, engineering and additional timeline contingency. There is no room to remove features or functionality from the migration process.&lt;/p&gt;

&lt;p&gt;I have seen one scope reduction approach work, which is to propose the reduction of data volume by the process of archiving old data. This does not reduce the data mapping scope but reduces the timeline because migration execution time is reduced.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrap size indicator</title>
      <link>http://clintsimon.com/post/2014/2014-06-06-bootstrap-size-indicator/</link>
      <pubDate>Fri, 06 Jun 2014 08:23:36 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2014/2014-06-06-bootstrap-size-indicator/</guid>
      <description>&lt;p&gt;I have been doing work with &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap 3&lt;/a&gt; as of late. When building responsive layouts, I find it very handy to immediately see which predefined size group you are currently viewing. Hereâ€™s a little snippet that shows the current Bootstrap size modifier.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/csim/30aed7384208a76f6a07.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is especially helpful when viewing a page from a mobile device or table. You can easily deduce which size group maps to a particular device in each orientation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embed video in SharePoint</title>
      <link>http://clintsimon.com/post/2013/2013-11-25-embed-video-sharepoint/</link>
      <pubDate>Mon, 25 Nov 2013 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2013/2013-11-25-embed-video-sharepoint/</guid>
      <description>&lt;p&gt;I recently had to embed a full-screen video into a SharePoint 2010 page (don&amp;rsquo;t ask). Here is the solution using the default silverlight embeded video player which is packaged with SharePoint 2010.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/csim/10283199.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Keyboard Manual Registry Settings</title>
      <link>http://clintsimon.com/post/2013/2013-11-25-keyboard-registry-settings/</link>
      <pubDate>Mon, 25 Nov 2013 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2013/2013-11-25-keyboard-registry-settings/</guid>
      <description>&lt;p&gt;I have always had a sneaking suspicion that my keyboard repeat rate and repeat delay settings were a little too slow for my taste. Windows only lets to you increase the values in a fixed range but with a registry change, you can adjust as you please.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/csim/10286225.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Play around with AutoRepeatDelay and AutoRepeatRate, these are the settings that work for me.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t set the AutoRepeatDelay too fast, it will make it so that when you type letters they are repeated immediately. Makes it really hard to type your password :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Sublime Text Shortcut</title>
      <link>http://clintsimon.com/post/2013/2013-11-04-powershell-sublime-shortcut/</link>
      <pubDate>Mon, 04 Nov 2013 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2013/2013-11-04-powershell-sublime-shortcut/</guid>
      <description>&lt;p&gt;Lately I have been learning about &amp;ldquo;Git&amp;rdquo;:&lt;a href=&#34;http://git-scm.org&#34;&gt;http://git-scm.org&lt;/a&gt; and &amp;ldquo;GitHub&amp;rdquo;:&lt;a href=&#34;http://github.com&#34;&gt;http://github.com&lt;/a&gt;. Most of this work is done at the command line, I have found myself quickly amassing PowerShell functions that acts as shortcuts.&lt;/p&gt;

&lt;p&gt;One very handy shortcut is the ability to launch the &amp;ldquo;sublime text editor&amp;rdquo;:&lt;a href=&#34;http://www.sublimetext.com&#34;&gt;http://www.sublimetext.com&lt;/a&gt; and open the current directory as a project. Or alternately passing in a file to edit.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/csim/10286154.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Once this function is in your powershell profile, just type &amp;ldquo;edit&amp;rdquo; at the command prompt and sublime will open the current folder.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I learned to code</title>
      <link>http://clintsimon.com/post/2013/2013-08-10-how-I-learned-to-code/</link>
      <pubDate>Sat, 10 Aug 2013 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2013/2013-08-10-how-I-learned-to-code/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not a long-term planner. I&amp;rsquo;ve never made a &amp;ldquo;5 year plan&amp;rdquo; or thought about where I want to be 10 years from now. I simply look at what my options are and make a decision about what to do next.&lt;/p&gt;

&lt;p&gt;I only learned to code because my dad needed a problem solved. He ran a consulting business where he needed to perform regular equipment maintenance. It was 1996 and the web was new. It seemed like it might be possible to track schedules and log maintenance activities via the World Wide Web.&lt;/p&gt;

&lt;p&gt;I was young and foolish, so I started right away. I knew very little about programming having only built very simple programs in basic on my commodore 64 roughly 10 years earlier. I picked Perl because it was available with my college computer lab account which was the right price (free). I could also expose the script to the web, score!&lt;/p&gt;

&lt;p&gt;Looking back, I was a pretty awful programmer at that time. I had about 5 tricks in my bag and writing a function was not one of them. The Perl script became one long if statement with print statements to emit HTML. Around 800 lines of code with no functions. Wow, does this seem backwards to me now. To top it off, I wrote a rudimentary serialization process to save my in-memory HashTable to a text file.&lt;/p&gt;

&lt;p&gt;To be fair, I did not know the word &amp;ldquo;serialization&amp;rdquo; at the time. I just knew that I needed to save some data and have it available on the next web request. I happily wrote some code at the end of my script to store the text file after each request was rendered and some code at the top to read the file. Done.&lt;/p&gt;

&lt;p&gt;I was absolutely intoxicated by the process of coding my first web application. I literally could not get enough. I worked on the script with every sliver of free time that I had and when I wasn&amp;rsquo;t working on it, I was thinking about it or dreaming about it.&lt;/p&gt;

&lt;p&gt;How could I get this element to render? How could I get the code to run faster? What do I do with this data? Can I build a calendar?&lt;/p&gt;

&lt;p&gt;I was great. I probably learned more in those 6 weeks than at any other time in my career. But more than that, it forged my desire to be a programmer. I am still chasing the high that I felt over 15 years ago on the first project. There is nothing like having an idea, building it and watching it grow into something valuable.&lt;/p&gt;

&lt;p&gt;That little application that I built went on to run a substantial part of my dad&amp;rsquo;s business for a few years until I replaced it with a new version that was more professional. It was great to see it work for so long but the larger net effect was that I was hooked on coding. I haven&amp;rsquo;t looked back once.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rediscovering Code</title>
      <link>http://clintsimon.com/post/2013/2013-08-07-Rediscovering-Code/</link>
      <pubDate>Wed, 07 Aug 2013 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2013/2013-08-07-Rediscovering-Code/</guid>
      <description>&lt;p&gt;Over the past year or so, my career has taken a turn toward what I would call &amp;ldquo;pure consulting&amp;rdquo; or put more plainly, &amp;ldquo;giving people my opinion&amp;rdquo;. During this time I really hadn&amp;rsquo;t written any code to speak of, minus some small side projects. There just wasn&amp;rsquo;t a need for it and frankly I had my hands full.&lt;/p&gt;

&lt;p&gt;All that changed when I started a new project and took ownership of a large chunk of functionality. As the development lead I sure as hell wanted to get my hands dirty with the code, setup the framework, etc. So I jumped in head first and started coding.&lt;/p&gt;

&lt;p&gt;I honestly forgot how cool it is to code something from scratch and see it grow from an idea to a fully functional application. It was total invigorating to see things take shape and evolve, each step of the way becoming more intricate and complex.&lt;/p&gt;

&lt;p&gt;I never get tired of the code manipulation cycle. Making a code change, seeing the result and making another change, over and over again. It&amp;rsquo;s just one of those things that never gets old. It really feels like a disease is some ways. Your mind is consumed, all your thoughts spent strategizing on the next set of changes and thinking of the long term implications.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a skill that feels intrinsic, not a learned behavior but something must have been inside you from the beginning. How lucky am I that I get paid to do this? Pretty cool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Up with Technology</title>
      <link>http://clintsimon.com/post/2012/2012-11-14-Keeping-Up-with-Technology/</link>
      <pubDate>Wed, 14 Nov 2012 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2012/2012-11-14-Keeping-Up-with-Technology/</guid>
      <description>&lt;p&gt;Learning new technologies and techniques is a part of life for any software developer. Programming is a quest for knowledge and understanding which lasts your entire lifetime. No other profession has a more dynamic working environment. Tools change and evolve on a daily basis it seems.  Learning is incumbent on all developers. Darwin&amp;rsquo;s law applies, adapt or perish.&lt;/p&gt;

&lt;p&gt;Luckily most of us are used to this environment and thrive on the constantly changing landscape. I have found over my career that the pace of change has only increased, particularly in the past few years. The move to cloud computing is a big driver and the open source movement is creating a climate of rapid discovery and change. Thousands of new approaches to old problems are being forged this very moment.&lt;/p&gt;

&lt;p&gt;Benefits can be reaped if you are efficient with your time and energy. Your value as an employee can be traced back to your technology aptitude and that aptitude is greatly affected by your knowledge of the technology spectrum which you apply to a project. This doesn&amp;rsquo;t mean that you need to have the deepest knowledge on a particular technology but instead you need a broad view of how technology fits together and how to choose the right pieces to solve a problem. Suggesting the pieces can be more important that understanding how each pieces works.&lt;/p&gt;

&lt;p&gt;Generally I try to follow a few key rules which keep me in touch with new technology:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find quality sources.&lt;/strong&gt; Find the best possible sources which apply to the technology space where you work. Each source should have excellent content covering a set of topics that could potentially apply to your daily work.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organize the channels.&lt;/strong&gt; Create channels to monitor your sources, &lt;a href=&#34;http://reader.google.com&#34;&gt;Google reader&lt;/a&gt; works well, &lt;a href=&#34;http://twitter.com&#34;&gt;twitter&lt;/a&gt; a bit noisy. You want these streams to have a high signal to noise ratio. Don&amp;rsquo;t add pundits or 24-hour tech news into this mix. They are too noisy. Add sources that you know produce great topical content. For me, technology specific tech blogs work best.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read your channels regularly.&lt;/strong&gt; I try to read through my sources at least once per day. Some days there isn&amp;rsquo;t much to learn but other days I have multiple &amp;ldquo;holy cow&amp;rdquo; moments. If this becomes a chore then you might want to look for a new line of work :)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Remember, Software is Soft</title>
      <link>http://clintsimon.com/post/2012/2012-11-09-Remember-Software-is-Soft/</link>
      <pubDate>Fri, 09 Nov 2012 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2012/2012-11-09-Remember-Software-is-Soft/</guid>
      <description>&lt;p&gt;There are times when I have witness (and participated in) arguments about trade-offs between scope and effort. Sometimes developers tend to push back fairly hard with the perception is that the effort is too high for a particular feature change.&lt;/p&gt;

&lt;p&gt;Coders can become downright defensive when you are talking about changing the fundamentals of an application. After all, this is their baby and someone just through it out with the bathwater.&lt;/p&gt;

&lt;p&gt;As programmers, we need to remember that software is soft. Meaning that it can be changed and it should be changed to conform to whatever the application requirements dictate. We are not talking about destroying a building to change the wall color. We are talking about changing &lt;strong&gt;soft&lt;/strong&gt;ware to meet new requirements.&lt;/p&gt;

&lt;p&gt;By the way, we are &lt;em&gt;paid&lt;/em&gt; to make these changes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Be Lazy and Smart</title>
      <link>http://clintsimon.com/post/2012/2012-11-07-Be-Lazy-and-Smart/</link>
      <pubDate>Wed, 07 Nov 2012 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2012/2012-11-07-Be-Lazy-and-Smart/</guid>
      <description>&lt;p&gt;One of the best things that you can do as a developer is to be equal parts lazy and smart. This is an art that can be mastered to great effect. I don&amp;rsquo;t mean that you should abandon your passion for programming or stop being focused and goal driven. I mean that you should avoid work that is not absolutely necessary. To do that you need to be both lazy and smart in equal parts.&lt;/p&gt;

&lt;p&gt;There are pitfalls. Laziness without being smart leads to inaction. Being smart without laziness leads to constantly reinventing the wheel. Ultimately the value you deliver needs to increase as a result of being lazy and smart.&lt;/p&gt;

&lt;p&gt;Laziness means that you don&amp;rsquo;t want to do work that is unnecessary. You would rather copy and paste a known good solution rather than write it from scratch. You would rather ask a colleague for a quick answer than search for the same answer for hours. You would rather do a quick prototype rather than spending days in meetings arguing about how the application should look.&lt;/p&gt;

&lt;p&gt;Being lazy means that you are constantly looking for &lt;em&gt;congruent efficiency&lt;/em&gt;. You want to find a better way to get a goal accomplished with the same quality but less effort. You want to spend more time making great software with great user experiences, and less time doing mundane tasks. Mundane tasks are like the scourge of software development. Luckily new tools and techniques are eliminating mundane tasks but there are still area where you can make significant time savings.&lt;/p&gt;

&lt;p&gt;Being smart is the most important part of the equation. If you are just lazy, then you really don&amp;rsquo;t get anywhere quickly. But put lazy and smart together, and you get magic. That elusive balance where you are practically cheating. Things are so easy and yet so effective. Smart makes your laziness seem like genius.&lt;/p&gt;

&lt;p&gt;Some Ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eliminate unnecessary meetings.&lt;/strong&gt; Keep meetings short and to the point. Focus meetings on working software with demos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have a code library for common patterns.&lt;/strong&gt; Copy/paste from the library when you come across a pattern that you have used before. Keep the library up to date with latest practices and new patterns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Leverage co-workers.&lt;/strong&gt; When you have a hard problem, you may be surprised to learn that your colleagues have solved this problem in the past. Ask early in the cycle to avoid duplicate work and potential mistakes based on a potentially flawed approach. Hold code reviews so that you can validate your solutions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search the internet.&lt;/strong&gt; Sounds silly but I&amp;rsquo;ve seen people plug away at a problem without looking for a solution online first. Google is your friend.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>It doesn&#39;t matter what it is. Start Now.</title>
      <link>http://clintsimon.com/post/2012/2012-10-30-Start-Now/</link>
      <pubDate>Tue, 30 Oct 2012 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2012/2012-10-30-Start-Now/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s funny, I put off writing this post for over a week. That might make me a hypocrite but it doesn&amp;rsquo;t mean that the truth is less important. Procrastination is the enemy.&lt;/p&gt;

&lt;p&gt;If you want to get something done, start immediately and &lt;a href=&#34;http://www.economist.com/node/18557776&#34;&gt;fail often&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a million reasons not to start right away. Maybe you won&amp;rsquo;t be any good at it, or you have more important things to do. Maybe you are just plain scared of judgment from your peers.&lt;/p&gt;

&lt;p&gt;The truth is that starting a task is the most important step to finishing a task. If it&amp;rsquo;s something simple then just knock it out quickly. If it&amp;rsquo;s a more complicated task, then engaging your mind is the pathway to completion. Engaging your mind on a particular task acts like a channel, forcing thoughts to form around a central idea. Once your mind is engaged in problem solving there is a very low chance that you will slip on into procrastination.&lt;/p&gt;

&lt;p&gt;There are some exceptions to this. When there is a hard problem that I can&amp;rsquo;t seem to solve with conventional methods, I sometimes allow myself to completely forget about the topic altogether. This is not procrastination but rather a way to utilize my sub-conscious mind. My letting the topic ferment in the deep recesses of my mind I can afford&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tech Interview Question: The Clock Problem</title>
      <link>http://clintsimon.com/post/2012/2012-10-12-Clock-Problem/</link>
      <pubDate>Fri, 12 Oct 2012 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2012/2012-10-12-Clock-Problem/</guid>
      <description>

&lt;p&gt;&amp;ldquo;The Clock Problem&amp;rdquo; is an interview question that I have been using for a few years. I first learned about it when I was being interviewed. I have now adopted it as my first line of defense against imposters. :)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a simple problem that can be used to determine a candidate&amp;rsquo;s capacity for analytical problem solving. The beauty is that the problem has a simple and elegant solution which can be found in less than 10 minutes. More importantly it forces the candidate to think about a problem that he or she has not likely considered before. The problem domain is also easily understood, everyone knows how a clock works.&lt;/p&gt;

&lt;h3 id=&#34;problem-statement:748ed73ae35f87e2d44e98b83303e427&#34;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Write a function that can compute the angle between the hands of a clock given a time of day. Take your time and think it through, then we will walk-through your solution.&lt;/p&gt;

&lt;h3 id=&#34;solution:748ed73ae35f87e2d44e98b83303e427&#34;&gt;Solution&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Deduce that for each hour on the clock there are 30 degrees. 360 degrees divided by 12 hours.&lt;/li&gt;
&lt;li&gt;Deduce that for each minute on the clock there are 6 degrees. 360 degrees divided by 60 minutes.&lt;/li&gt;
&lt;li&gt;Compute the angle with respect to 12 o&amp;rsquo;clock for both the hour hand and the minute hand. For the hour hand the formula is: hour * 30, for the minute hand: minute * 6&lt;/li&gt;
&lt;li&gt;Subtract the hour angle from the minute angle to get the solution. Ensure that the result is less than 180 degrees.&lt;/li&gt;
&lt;li&gt;Extra Credit: The hour hand doesn&amp;rsquo;t point directly to the hour, it moves proportionally to the minute value between hours. This can be computed by adding a factor to the hour hand position. This factor is computed based on the minute value and added to the hour hand angle (see solution below).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;full-solution-in-javascript:748ed73ae35f87e2d44e98b83303e427&#34;&gt;Full solution in JavaScript&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://jsfiddle.net/ctrl1024/2Mk24/&#34;&gt;http://jsfiddle.net/ctrl1024/2Mk24/&lt;/a&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/csim/10286010.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;likely-outcomes:748ed73ae35f87e2d44e98b83303e427&#34;&gt;Likely outcomes&lt;/h3&gt;

&lt;p&gt;After giving this problem dozens of times, I have noticed responses that roughly fall into these tags:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Candidate goes quiet for about 5 minutes. Then says that he/she would create a lookup table where given an hour or minute, they would retrieve the angle. This is skirting the exercise entirely, my response is that we should take a few minutes and compute some of the lookup values. If this doesn&amp;rsquo;t work then I ask if there is a mathematical way to relate the hand position to an angle.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Candidate understands that there is a mathematical solution but struggles to find the relationship between hand position and angle. I wait about 10 minutes, then start to give hints like: How many minutes per rotation? How many degrees per rotation? The important thing here is not to give away the solution but just enough information to direct the candidate towards the solution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Candidate struggles at each stage. I give small hints and eventually the solution is found. I try to determine if nerves are a factor or if there is a lack of skill. Usually I would pass on the candidate unless there are other factors at play. I may give another coding problem to find a pattern if one exists.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Candidate gives up after about 10 minutes of floundering. This is a total fail and I usually end the interview politely but quickly.  In my opinion this problem can be solved by 8th grader (without coding) and any developer with some experience should be able to solve.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion:748ed73ae35f87e2d44e98b83303e427&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This may sound like a simple problem but I believe it really does show analytical ability. Most importantly it allows for discussion and discourse in the context of an interview. This will tell you how the candidate reacts to a real-time challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Take Pride in Your Work</title>
      <link>http://clintsimon.com/post/2012/2012-10-10-Pride-in-Your-Work/</link>
      <pubDate>Wed, 10 Oct 2012 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2012/2012-10-10-Pride-in-Your-Work/</guid>
      <description>

&lt;p&gt;In my daily work, I lead teams that build software. These are &amp;ldquo;line of business&amp;rdquo; or &amp;ldquo;enterprise&amp;rdquo; software systems. I come into contact with a lot of developers, all with differing backgrounds, experience levels and personalities. I see the good and the bad. Pride generally stands out as the most accurate quality indicator of the individual developer.&lt;/p&gt;

&lt;p&gt;Having pride in your work makes you want to improve. If you are mindful of the effects that your work has on others, that can only lead to a better career path. First, you need to be self-aware and able to see your work through the eyes of a co-worker. Then you need to have the foresight to adjust your behavior accordingly.&lt;/p&gt;

&lt;p&gt;Ask your self these questions, they all show pride in your work:&lt;/p&gt;

&lt;h3 id=&#34;how-can-i-communicate-more-effectively-with-the-team:4087a2688a1790cb7eaab2ddc8ef5304&#34;&gt;How can I communicate more effectively with the team?&lt;/h3&gt;

&lt;p&gt;Be clear and concise. Don&amp;rsquo;t ramble. Stay on topic, avoid distractions. Drive the conversation forward. Don&amp;rsquo;t speak if you have nothing to say. When you speak, add value. Listen. Yield to the experts. Challenge but don&amp;rsquo;t create conflict. Keep everything on a business level. Take time understand context. Provide context.&lt;/p&gt;

&lt;h3 id=&#34;how-can-i-make-my-self-more-valuable-to-the-team:4087a2688a1790cb7eaab2ddc8ef5304&#34;&gt;How can I make my self more valuable to the team?&lt;/h3&gt;

&lt;p&gt;Follow through on your commitments. Don&amp;rsquo;t get in over your head. Mentor others. Give constructive feedback. Call out issues early. Be proactive. Always give 100%. Be consistent. Take ownership. Take responsibility for mistakes.&lt;/p&gt;

&lt;h3 id=&#34;what-can-i-do-to-help-others-more-easily-discover-the-design-of-this-component:4087a2688a1790cb7eaab2ddc8ef5304&#34;&gt;What can I do to help others more easily discover the design of this component?&lt;/h3&gt;

&lt;p&gt;Use descriptive variable names (even on private / local members). Add comments to code that is not obviously understood. Use the built-in documentation conventions of your language. Name classes, properties and methods in a &lt;em&gt;logical and consistent&lt;/em&gt; way.&lt;/p&gt;

&lt;p&gt;All of this ultimately forms your reputation as a developer. All you have is your reputation. I have moved jobs a fews times in my career and I can tell you that having a network of people who are aware of your capabilities is the best possible resource when it&amp;rsquo;s time for job hunting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The case of the 30 day memcache timeout on app engine</title>
      <link>http://clintsimon.com/post/2011/2011-10-28-The-case-of-the-30-day-memcache-timeout-on-app-engine/</link>
      <pubDate>Fri, 28 Oct 2011 08:00:00 -0800</pubDate>
      
      <guid>http://clintsimon.com/post/2011/2011-10-28-The-case-of-the-30-day-memcache-timeout-on-app-engine/</guid>
      <description>&lt;p&gt;I ran into an interesting problem with Google app engine. It seems that the memcache time limit is enforced differently on the development server versus the production servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/memcached/wiki/FAQ#What_are_the_limits_on_setting_expire_time?_(why_is_there_a_30_d&#34;&gt;The documentation&lt;/a&gt; says that the time limit for a memcache key is 30 days. The behavior that I have observed is that if you set a memcache key to timeout at 30 days, the development server (on windows) will happily persist the data as expected.&lt;/p&gt;

&lt;p&gt;On the production servers, it seems that the behavior is much different. I have notice with a timeout of 30 days, that memcache will not only ignore the persisted key but it will also cause erratic behavior for instances in your application.&lt;/p&gt;

&lt;p&gt;Under these conditions a new instance of my application was start for each request! Obviously this adversely effects performance.&lt;/p&gt;

&lt;p&gt;Once I changed the memcache timeout to a lesser value (under 30 days), the problem stopped.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>